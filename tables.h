#ifndef TABLES_H
#define TABLES_H

#include "machineinstr.h"


void parsimonious (char *file, char *obj);
void still_parsimonious (char *still_obj);


struct tableEntry
{
  char type;
  char *symbol;
  int location;
} table[100];

typedef struct tableEntry cptable;

struct keywords
{
  unsigned int code;
  char *instrName;		/*GNB instruction's name */
  int instrn;			/*number of machine language instrucitions generated by each GNB instruction */
} Keyword[] =
{
  {
  NOTHING, "rem", 1},
  {
  READ, "input", 1},
  {
  WRITE, "print", 1},
  {
  RPNLOAD, "if", 1},
  {
  SUB, "==", 1},		/*don't use 'is' token */
  {
  SUB, ">", 1},
  {
  SUB, "<", 1},
  {
  RPNLOAD, "=", 1},
  {
  STORE, "let", 1},
  {
  JUMP, "goto", 1},
  {
  BEG_ROUTINE, "function", 1},
  {
  CALL_ROUTINE, "call", 1},
  {
  RETURN, "return", 1},
  {
  BACK, "next", 1}
};

struct math
{
  unsigned int ident;
  char *oper;
} Operators[] =
{
  {
  _PLUS_, "+"},
  {
  _MINUS_, "-"},
  {
  _AND_, "*"},
  {
  _FRACT_, "/"},
  {
  _RAISE_, "^"}
};

typedef struct math Math;

struct var
{
  unsigned int id;
  char *name;
  char type;
} vars[100];

typedef struct var cpvars;

struct consts
{				/*store for constants */
  unsigned int id;
  float value;
};

struct functions
{
  int pos;
  char *namefunc;
} funktable[100];

typedef struct functions Funk;


#define STRTOKEN '$'
#define num_oper (sizeof(Operators)/sizeof(Math))
#define nr_instr (sizeof(Keyword)/sizeof(struct keywords))

#endif
